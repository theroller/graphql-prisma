# import CommentOrderByInput from './generated/prisma.graphql'
# import PostOrderByInput from './generated/prisma.graphql'
# import UserOrderByInput from './generated/prisma.graphql'

type Query {
    comments(after: String, first: Int, orderBy: CommentOrderByInput, skip: Int): [Comment!]!
    me: User!
    myPosts(after: String, first: Int, orderBy: PostOrderByInput, query: String, skip: Int): [Post!]!
    post(id: ID!): Post!
    posts(after: String, first: Int, orderBy: PostOrderByInput, query: String, skip: Int): [Post!]!
    users(after: String, first: Int, orderBy: UserOrderByInput, query: String, skip: Int): [User!]!
}

type Mutation {
    createComment(data: CreateCommentInput!): Comment!
    createPost(data: CreatePostInput!): Post!
    createUser(data: CreateUserInput!): AuthPayload!
    deleteComment(id: ID!): Comment!
    deletePost(id: ID!): Post!
    deleteUser: User!
    login(data: LoginUserInput!): AuthPayload!
    updateComment(id: ID!, data: UpdateCommentInput!): Comment!
    updatePost(id: ID!, data: UpdatePostInput!): Post!
    updateUser(data: UpdateUserInput!): User!
}

type Subscription {
    comment(postID: ID!): CommentSubscriptionPayload!
    myPost: PostSubscriptionPayload!
    post: PostSubscriptionPayload!
}

enum MutationType {
    CREATED
    DELETED
    UPDATED
}

type AuthPayload {
    token: String!
    user: User!
}

input CreateCommentInput {
    text: String!
    post: ID!
}

input CreatePostInput {
    title: String!
    body: String!
    published: Boolean!
}

input CreateUserInput {
    name: String!
    email: String!
    password: String!
}

input LoginUserInput {
    email: String!
    password: String!
}

input UpdateCommentInput {
    text: String
}

input UpdatePostInput {
    title: String
    body: String
    published: Boolean
}

input UpdateUserInput {
    name: String
    email: String
    password: String
}

type Comment {
    id: ID!
    text: String!
    author: User!
    post: Post!
    createdAt: String!
    updatedAt: String!
}

type CommentSubscriptionPayload {
    mutation: MutationType!
    node: Comment
}

type Post {
    id: ID!
    title: String!
    body: String!
    published: Boolean!
    author: User!
    comments: [Comment!]!
    createdAt: String!
    updatedAt: String!
}

type PostSubscriptionPayload {
    mutation: MutationType!
    node: Post
}

type User {
    id: ID!
    name: String!
    email: String
    password: String!
    posts: [Post!]!
    comments: [Comment!]!
    createdAt: String!
    updatedAt: String!
}
